# Generated by Django 5.1.6 on 2025-02-20 16:49

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID/код назначения')),
                ('title', models.CharField(blank=True, max_length=250, null=True, verbose_name='Название назначения')),
                ('accusative_case_title', models.CharField(blank=True, max_length=250, null=True, verbose_name='Название в винительном падеже')),
            ],
            options={
                'verbose_name': 'Назначение',
                'verbose_name_plural': 'Назначения',
            },
        ),
        migrations.CreateModel(
            name='HazardClass',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Название класса опасности')),
            ],
            options={
                'verbose_name': 'Класс опасности',
                'verbose_name_plural': 'Классы опасности',
            },
        ),
        migrations.CreateModel(
            name='KindTU',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Вид')),
                ('is_for_journal', models.BooleanField(default=False, verbose_name='Для журнала')),
            ],
            options={
                'verbose_name': 'Вид ТУ',
                'verbose_name_plural': 'Виды ТУ',
            },
        ),
        migrations.CreateModel(
            name='Manufacturer',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Название завода')),
                ('country', models.CharField(blank=True, max_length=200, null=True, verbose_name='Страна-производитель')),
            ],
            options={
                'verbose_name': 'Завод-изготовитель',
                'verbose_name_plural': 'Заводы-изготовители',
            },
        ),
        migrations.CreateModel(
            name='NameTU',
            fields=[
                ('id', models.IntegerField(default=0, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Название ТУ',
                'verbose_name_plural': 'Названия ТУ',
            },
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=200, null=True, verbose_name='Название должности')),
            ],
            options={
                'verbose_name': 'Должность',
                'verbose_name_plural': 'Должности',
            },
        ),
        migrations.CreateModel(
            name='Setup',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID организации')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Название')),
                ('short_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Краткое название')),
                ('structure_parent_id', models.IntegerField(blank=True, null=True, verbose_name='ID родительского подразделения')),
            ],
            options={
                'verbose_name': 'Конфигурация подразделения',
                'verbose_name_plural': 'Конфигурация подразделений',
            },
        ),
        migrations.CreateModel(
            name='TypeOPO',
            fields=[
                ('id', models.IntegerField(default=0, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Название')),
                ('short_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Краткое название')),
                ('reg_number', models.CharField(blank=True, max_length=200, null=True, verbose_name='Регистрационный номер')),
            ],
            options={
                'verbose_name': 'Тип ОПО',
                'verbose_name_plural': 'Типы ОПО',
            },
        ),
        migrations.CreateModel(
            name='TypeTU',
            fields=[
                ('id', models.IntegerField(default=0, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Тип')),
                ('is_for_journal', models.BooleanField(default=False, verbose_name='Для журнала')),
            ],
            options={
                'verbose_name': 'Тип ТУ',
                'verbose_name_plural': 'Типы ТУ',
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Название роли')),
            ],
            options={
                'verbose_name': 'Роль пользователя',
                'verbose_name_plural': 'Роли пользователей',
            },
        ),
        migrations.CreateModel(
            name='UserSetting',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('network_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='Сетевое имя')),
                ('auto_card_number', models.IntegerField(blank=True, null=True, verbose_name='Номер карты')),
                ('ini_file', models.FileField(blank=True, null=True, upload_to='', verbose_name='INI-файл')),
                ('ini_file_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Название INI-файла')),
            ],
            options={
                'verbose_name': 'Настройка пользователя',
                'verbose_name_plural': 'Настройки пользователей',
            },
        ),
        migrations.CreateModel(
            name='Info',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_auth_id', models.UUIDField(blank=True, null=True, unique=True, verbose_name='ID в Auth-сервисе')),
                ('group_account', models.CharField(blank=True, max_length=255, null=True, verbose_name='Групповая учетная запись')),
                ('full_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='ФИО')),
                ('position', models.CharField(blank=True, max_length=255, null=True, verbose_name='Должность')),
                ('specialist_expl_unit', models.BooleanField(blank=True, default=False, verbose_name='Специалист эксплуатационного подразделения')),
                ('head_expl_unit', models.BooleanField(blank=True, default=False, verbose_name='Руководитель эксплуатационного подразделения')),
                ('specialist_itc_service', models.BooleanField(blank=True, default=False, verbose_name='Специалист службы ИТЦ')),
                ('head_itc_service', models.BooleanField(blank=True, default=False, verbose_name='Руководитель службы ИТЦ')),
                ('production_diagnostic_department', models.BooleanField(blank=True, default=False, verbose_name='Производственно-диагностический отдел')),
                ('head_corporate_supervision', models.BooleanField(blank=True, default=False, verbose_name='Руководитель корпоративного надзора')),
                ('email', models.EmailField(blank=True, max_length=255, null=True, verbose_name='Email')),
                ('access_rights_arm', models.BooleanField(blank=True, default=False, verbose_name='Наличие прав доступа к АРМ')),
                ('active_account', models.BooleanField(default=True, verbose_name='Активный аккаунт')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='info', to=settings.AUTH_USER_MODEL, verbose_name='Django User')),
            ],
            options={
                'verbose_name': 'Информация',
                'verbose_name_plural': 'Информация',
            },
        ),
        migrations.CreateModel(
            name='StructuralUnitTree',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('unit_code', models.IntegerField(blank=True, null=True, verbose_name='Код подразделения')),
                ('level', models.SmallIntegerField(blank=True, null=True, verbose_name='Уровень в иерархии')),
                ('firm_id', models.IntegerField(blank=True, null=True, verbose_name='ID организации')),
                ('reporting_branch_number', models.IntegerField(blank=True, null=True, verbose_name='Номер отчетного филиала')),
                ('reporting_branch_id', models.IntegerField(blank=True, null=True, verbose_name='ID отчетного филиала')),
                ('parent_unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='monitoring_service.structuralunittree', verbose_name='Родительское подразделение')),
            ],
            options={
                'verbose_name': 'Дерево структурного подразделения',
                'verbose_name_plural': 'Деревья структурных подразделений',
            },
        ),
        migrations.CreateModel(
            name='OPO',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False, verbose_name='ID ОПО')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Название')),
                ('short_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Краткое название')),
                ('reg_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='Регистрационный номер')),
                ('structural_unit_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='monitoring_service.structuralunittree', verbose_name='ID структурного подразделения')),
                ('type_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='monitoring_service.typeopo', verbose_name='ID типа ОПО')),
            ],
            options={
                'verbose_name': 'ОПО',
                'verbose_name_plural': 'ОПО',
            },
        ),
        migrations.CreateModel(
            name='TU',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_number', models.CharField(blank=True, max_length=200, null=True, verbose_name='Регистрационный номер оборудования')),
                ('serial_number', models.CharField(blank=True, max_length=200, null=True, verbose_name='Серийный номер')),
                ('state_registration_number', models.CharField(blank=True, max_length=200, null=True, verbose_name='Гос. регистрационный номер')),
                ('factory_number', models.CharField(blank=True, max_length=200, null=True, verbose_name='Заводской номер')),
                ('brand', models.CharField(blank=True, max_length=500, null=True, verbose_name='Марка')),
                ('technical_characteristics', models.CharField(blank=True, max_length=200, null=True, verbose_name='Краткие тех. характеристики')),
                ('gtt_registration_number', models.CharField(blank=True, max_length=200, null=True, verbose_name='Регистрационный номер ГТТ')),
                ('scheme_number', models.CharField(blank=True, max_length=200, null=True, verbose_name='Номер по тех. схеме')),
                ('manufacture_year', models.CharField(blank=True, max_length=200, null=True, verbose_name='Год изготовления')),
                ('service_life_years', models.SmallIntegerField(blank=True, null=True, verbose_name='Нормативный срок эксплуатации (лет)')),
                ('commissioning_year', models.SmallIntegerField(blank=True, null=True, verbose_name='Год ввода в эксплуатацию')),
                ('decommissioning_year', models.SmallIntegerField(blank=True, null=True, verbose_name='Год окончания эксплуатации')),
                ('wear_percentage', models.FloatField(blank=True, null=True, verbose_name='Процент износа')),
                ('last_epb_date', models.DateField(blank=True, null=True, verbose_name='Дата последнего ЭПБ')),
                ('next_epb_date', models.DateField(blank=True, null=True, verbose_name='Дата следующего ЭПБ')),
                ('last_inspection_date', models.DateField(blank=True, null=True, verbose_name='Дата очередной проверки')),
                ('next_inspection_date', models.DateField(blank=True, null=True, verbose_name='Дата следующей проверки')),
                ('permitted_service_life', models.SmallIntegerField(blank=True, null=True, verbose_name='Разрешённый срок эксплуатации')),
                ('has_safety_device', models.BooleanField(blank=True, null=True, verbose_name='Наличие предохранительного устройства')),
                ('safety_device_type', models.CharField(blank=True, max_length=200, null=True, verbose_name='Тип предохранительного устройства')),
                ('volume_m3', models.FloatField(blank=True, null=True, verbose_name='Объём (м³)')),
                ('object_pressure_mpa', models.FloatField(blank=True, null=True, verbose_name='Объектное давление (МПа)')),
                ('dy_mm', models.FloatField(blank=True, null=True, verbose_name='Диаметр (мм)')),
                ('type', models.CharField(blank=True, max_length=200, null=True, verbose_name='Тип')),
                ('subtype', models.CharField(blank=True, max_length=200, null=True, verbose_name='Подтип')),
                ('lifting_capacity_t', models.FloatField(blank=True, null=True, verbose_name='Грузоподъёмность (т)')),
                ('volume_t', models.FloatField(blank=True, null=True, verbose_name='Объём (т)')),
                ('equipment_pressure_mpa', models.FloatField(blank=True, null=True, verbose_name='Давление оборудования (МПа)')),
                ('modernization_year', models.SmallIntegerField(blank=True, null=True, verbose_name='Год модернизации')),
                ('completed_measures', models.CharField(blank=True, max_length=200, null=True, verbose_name='Проведённые мероприятия')),
                ('rtn_permission_number', models.CharField(blank=True, max_length=200, null=True, verbose_name='Номер разрешения РТН')),
                ('epb_conclusion_number', models.CharField(blank=True, max_length=200, null=True, verbose_name='Номер заключения ЭПБ')),
                ('passport_present', models.BooleanField(blank=True, null=True, verbose_name='Наличие паспорта')),
                ('opo_info', models.CharField(blank=True, max_length=200, null=True, verbose_name='Сведения об ОПО')),
                ('rtn_info', models.BooleanField(blank=True, null=True, verbose_name='Информация РТН')),
                ('compliance_certificate_present', models.BooleanField(blank=True, null=True, verbose_name='Наличие сертификата соответствия')),
                ('rtn_certificate_present', models.BooleanField(blank=True, null=True, verbose_name='Наличие сертификата РТН')),
                ('epb_conclusion', models.CharField(blank=True, max_length=200, null=True, verbose_name='Вывод ЭПБ')),
                ('total_cycles', models.IntegerField(blank=True, null=True, verbose_name='Количество циклов')),
                ('actual_cycles', models.IntegerField(blank=True, null=True, verbose_name='Фактическое количество циклов')),
                ('replacement_id', models.IntegerField(blank=True, null=True, verbose_name='ID замены')),
                ('replacement_number', models.CharField(blank=True, max_length=200, null=True, verbose_name='Номер замены')),
                ('note1', models.TextField(blank=True, null=True, verbose_name='Примечание 1')),
                ('note2', models.TextField(blank=True, null=True, verbose_name='Примечание 2')),
                ('note3', models.TextField(blank=True, null=True, verbose_name='Примечание 3')),
                ('sr_control_presence_id', models.IntegerField(blank=True, null=True, verbose_name='ID наличия СР контроля')),
                ('cb_oncontrol', models.BooleanField(default=0, verbose_name='На контроле')),
                ('date_updated', models.DateTimeField(blank=True, null=True, verbose_name='Дата обновления')),
                ('updated_by', models.CharField(blank=True, max_length=100, null=True, verbose_name='Обновлено пользователем')),
                ('is_deleted', models.BooleanField(default=0, verbose_name='Удалено')),
                ('device_name_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='monitoring_service.nametu', verbose_name='ID наименования устройства')),
                ('hazard_class_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='monitoring_service.hazardclass', verbose_name='ID класса опасности')),
                ('kind_device_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='monitoring_service.kindtu', verbose_name='ID вида устройства')),
                ('manufacturer_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='monitoring_service.manufacturer', verbose_name='ID завода-изготовителя')),
                ('opo_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='monitoring_service.opo', verbose_name='ID ОПО')),
                ('device_type_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='monitoring_service.typetu', verbose_name='ID типа устройства')),
            ],
            options={
                'verbose_name': 'Техническое устройство',
                'verbose_name_plural': 'Технические устройства',
            },
        ),
        migrations.CreateModel(
            name='InspectionJournal',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('inspection_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата проверки')),
                ('tu_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='monitoring_service.tu', verbose_name='ID технического устройства')),
            ],
            options={
                'verbose_name': 'Журнал проверок',
                'verbose_name_plural': 'Журналы проверок',
            },
        ),
        migrations.CreateModel(
            name='EPBJournal',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('epb_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата ЭПБ')),
                ('epb_conclusion', models.CharField(blank=True, max_length=200, null=True, verbose_name='Вывод ЭПБ')),
                ('tu_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='monitoring_service.tu', verbose_name='ID технического устройства')),
            ],
            options={
                'verbose_name': 'Журнал ЭПБ',
                'verbose_name_plural': 'Журналы ЭПБ',
            },
        ),
        migrations.CreateModel(
            name='ControlNote',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('auto_card_number', models.IntegerField(blank=True, null=True, verbose_name='Номер карты пользователя')),
                ('text', models.TextField(blank=True, null=True, verbose_name='Текст заметки')),
                ('created_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата создания')),
                ('tu_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='monitoring_service.tu', verbose_name='ID технического устройства')),
            ],
            options={
                'verbose_name': 'Заметка контроля',
                'verbose_name_plural': 'Заметки контроля',
            },
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='ID сертификата')),
                ('type', models.CharField(max_length=500, verbose_name='Тип сертификата')),
                ('number', models.CharField(max_length=200, verbose_name='Номер сертификата')),
                ('date_from', models.DateField(blank=True, null=True, verbose_name='Дата выдачи')),
                ('date_to', models.DateField(blank=True, null=True, verbose_name='Дата окончания')),
                ('issued_by', models.CharField(max_length=500, verbose_name='Кем выдано')),
                ('scan', models.BinaryField(blank=True, null=True, verbose_name='Скан-копия')),
                ('tu_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='monitoring_service.tu', verbose_name='ID ТУ')),
            ],
            options={
                'verbose_name': 'Сертификат',
                'verbose_name_plural': 'Сертификаты',
            },
        ),
        migrations.CreateModel(
            name='Administrator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auto_card_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Номер карты')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='monitoring_service.info', verbose_name='Пользователь')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='monitoring_service.userrole', verbose_name='Роль администратора')),
            ],
            options={
                'verbose_name': 'Администратор',
                'verbose_name_plural': 'Администраторы',
            },
        ),
        migrations.CreateModel(
            name='UsersList',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('auto_card', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='monitoring_service.usersetting', verbose_name='Номер карты')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='monitoring_service.userrole', verbose_name='ID роли')),
            ],
            options={
                'verbose_name': 'Список пользователей',
                'verbose_name_plural': 'Списки пользователей',
            },
        ),
    ]
